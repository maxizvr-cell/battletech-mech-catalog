// mech-details.js - –õ–æ–≥–∏–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ—Ö–∞

class MechDetails {
    constructor() {
        this.mechData = null;
        this.loadMechData();
    }
    
    async loadMechData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Ö–∞ –∏–∑ URL
            const urlParams = new URLSearchParams(window.location.search);
            const mechId = urlParams.get('id');
            
            if (!mechId) {
                this.showError('ID –º–µ—Ö–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ URL');
                return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const response = await fetch('mechs-data-enhanced.json');
            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ—Ö–æ–≤');
            }
            
            const allMechs = await response.json();
            this.mechData = allMechs.find(mech => mech.id === mechId);
            
            if (this.mechData) {
                this.renderDetails();
            } else {
                this.showError(`–ú–ï–• –° ID "${mechId}" –ù–ï –ù–ê–ô–î–ï–ù`);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ö–∞');
        }
    }
    
    showError(message) {
        document.getElementById('mech-title').textContent = message;
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        document.querySelectorAll('.mech-details section').forEach(section => {
            section.style.display = 'none';
        });
    }
    
    renderDetails() {
        document.getElementById('mech-title').textContent = 
            `${this.mechData.name} ${this.mechData.model}`;
        
        this.renderBasicInfo();
        this.renderHardpoints();
        this.renderTechSpecs();
        this.renderArmor();
    }
    
    renderBasicInfo() {
        const grid = document.getElementById('basic-info-grid');
        
        const basicInfo = [
            { label: '–ú–æ–¥–µ–ª—å', value: this.mechData.model || '‚Äî' },
            { label: '–¢–æ–Ω–Ω–∞–∂', value: `${this.mechData.weight} tons` },
            { label: '–ö–ª–∞—Å—Å', value: this.mechData.weightClass, cssClass: `weight-${this.mechData.weightClass?.toLowerCase()}` },
            { label: 'Battle Value', value: this.mechData.battleValue || '‚Äî' },
            { label: '–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞', value: this.mechData.year || '‚Äî' },
            { label: '–°—Ç–æ–∏–º–æ—Å—Ç—å', value: this.mechData.cost ? `${this.formatCost(this.mechData.cost)} C-Bills` : '‚Äî' },
            { label: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', value: this.mechData.manufacturer || '‚Äî' },
            { label: '–ò—Å—Ç–æ—á–Ω–∏–∫', value: this.mechData.source || '‚Äî' }
        ];
        
        grid.innerHTML = basicInfo.map(info => `
            <div class="info-item">
                <span class="info-label">${info.label}</span>
                <span class="info-value ${info.cssClass || ''}">${info.value}</span>
            </div>
        `).join('');
    }
    
    renderHardpoints() {
        const container = document.getElementById('hardpoints-container');
        
        if (!this.mechData.hardpoints || Object.keys(this.mechData.hardpoints).length === 0) {
            container.innerHTML = '<p>–î–∞–Ω–Ω—ã–µ –æ —Ö–∞—Ä–¥–ø–æ–∏–Ω—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>';
            return;
        }
        
        const hardpointTypes = {
            'Ballistic': { icon: 'üî´', label: '–ë–ê–õ–õ–ò–°–¢–ò–ö–ê', color: 'ballistic' },
            'Energy': { icon: '‚ö°', label: '–≠–ù–ï–†–ì–ò–Ø', color: 'energy' },
            'Missile': { icon: 'üöÄ', label: '–†–ê–ö–ï–¢–´', color: 'missile' },
            'AntiPersonnel': { icon: 'üî™', label: '–ü–ï–•–û–¢–ê', color: 'antipersonnel' }
        };
        
        container.innerHTML = Object.entries(this.mechData.hardpoints)
            .map(([type, count]) => {
                const config = hardpointTypes[type];
                if (!config) return '';
                
                const maxSlots = 8; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const slotsHTML = this.generateSlotsHTML(count, maxSlots, config.color);
                
                return `
                    <div class="hardpoint-row">
                        <span class="hardpoint-icon">${config.icon}</span>
                        <span class="hardpoint-label">${config.label}:</span>
                        <div class="hardpoint-slots">${slotsHTML}</div>
                        <span class="hardpoint-count">${count}/${maxSlots}</span>
                    </div>
                `;
            })
            .join('');
    }
    
    generateSlotsHTML(filledSlots, maxSlots, colorClass) {
        let slotsHTML = '';
        
        for (let i = 0; i < maxSlots; i++) {
            const slotType = i < filledSlots ? colorClass : 'empty';
            slotsHTML += `<div class="slot ${slotType}" title="${i < filledSlots ? '–ó–∞–Ω—è—Ç' : '–°–≤–æ–±–æ–¥–µ–Ω'}"></div>`;
        }
        
        return slotsHTML;
    }
    
    renderTechSpecs() {
        const grid = document.getElementById('tech-specs-grid');
        
        if (!this.mechData.techSpecs) {
            grid.innerHTML = '<p>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>';
            return;
        }
        
        const specs = this.mechData.techSpecs;
        const techInfo = [
            { label: '–î–≤–∏–∂–µ–Ω–∏–µ (Walk/Run/Jump)', value: `${specs.movement?.walk || 0}/${specs.movement?.run || 0}/${specs.movement?.jump || 0}` },
            { label: '–ú–∞–∫—Å. –±—Ä–æ–Ω—è', value: specs.armor?.max || 0 },
            { label: '–¢–∏–ø –±—Ä–æ–Ω–∏', value: specs.armor?.type || 'Standard' },
            { label: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞', value: specs.structure || 'Standard' },
            { label: '–î–≤–∏–≥–∞—Ç–µ–ª—å', value: `${specs.engine?.rating || 0} ${specs.engine?.type || 'Fusion'}` },
            { label: '–¢–µ–ø–ª–æ–æ—Ç–≤–æ–¥—ã', value: specs.heatSinks || 0 }
        ];
        
        grid.innerHTML = techInfo.map(info => `
            <div class="spec-item">
                <span class="spec-label">${info.label}</span>
                <span class="spec-value">${info.value}</span>
            </div>
        `).join('');
    }
    
    renderArmor() {
        const grid = document.getElementById('armor-grid');
        
        if (!this.mechData.locations || Object.keys(this.mechData.locations).length === 0) {
            grid.innerHTML = '<p>–î–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>';
            return;
        }
        
        const locationNames = {
            'head': '–ì–æ–ª–æ–≤–∞',
            'leftarm': '–õ. –†—É–∫–∞', 
            'rightarm': '–ü. –†—É–∫–∞',
            'lefttorso': '–õ. –¢–æ—Ä—Å',
            'righttorso': '–ü. –¢–æ—Ä—Å',
            'centertorso': '–¶. –¢–æ—Ä—Å',
            'leftleg': '–õ. –ù–æ–≥–∞',
            'rightleg': '–ü. –ù–æ–≥–∞'
        };
        
        grid.innerHTML = Object.entries(this.mechData.locations)
            .map(([location, data]) => {
                const locationName = locationNames[location] || location;
                const armorValue = data.armor || 0;
                const rearArmor = data.rearArmor || 0;
                
                let armorText = `${armorValue}`;
                if (rearArmor > 0) {
                    armorText += ` (+${rearArmor} —Å–∑–∞–¥–∏)`;
                }
                
                return `
                    <div class="armor-location">
                        <span class="location-name">${locationName}</span>
                        <span class="armor-value">${armorText}</span>
                    </div>
                `;
            })
            .join('');
    }
    
    formatCost(cost) {
        if (!cost) return '0';
        return cost.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new MechDetails();
});
